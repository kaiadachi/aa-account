{"version":3,"file":"kernel-account.test.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/e2e-tests/kernel-account.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getDefaultEntryPointAddress,\n  type BatchUserOperationCallData,\n  type SmartAccountSigner,\n} from \"@alchemy/aa-core\";\nimport {\n  encodeAbiParameters,\n  parseAbiParameters,\n  toHex,\n  type Address,\n  type HDAccount,\n  type Hash,\n  type Hex,\n} from \"viem\";\nimport { mnemonicToAccount } from \"viem/accounts\";\nimport { polygonMumbai } from \"viem/chains\";\nimport {\n  KernelSmartContractAccount,\n  type KernelSmartAccountParams,\n} from \"../account.js\";\nimport { KernelAccountProvider } from \"../provider.js\";\nimport type { KernelUserOperationCallData } from \"../types.js\";\nimport { KernelBaseValidator, ValidatorMode } from \"../validator/base.js\";\nimport { API_KEY, OWNER_MNEMONIC } from \"./constants.js\";\nimport { MockSigner } from \"./mocks/mock-signer.js\";\n\nconst chain = polygonMumbai;\n\ndescribe(\"Kernel Account Tests\", () => {\n  //any wallet should work\n  const config = {\n    chain,\n    rpcProvider: `${chain.rpcUrls.alchemy.http[0]}/${API_KEY}`!,\n    validatorAddress: \"0x180D6465F921C7E0DEA0040107D342c87455fFF5\" as Address,\n    accountFactoryAddress:\n      \"0x5D006d3880645ec6e254E18C1F879DAC9Dd71A39\" as Address,\n    entryPointAddress: getDefaultEntryPointAddress(chain),\n  };\n\n  const ownerAccount = mnemonicToAccount(OWNER_MNEMONIC);\n  const owner: SmartAccountSigner<HDAccount> = {\n    inner: ownerAccount,\n    signerType: \"aa-sdk-tests\",\n    signMessage: async (msg) =>\n      ownerAccount.signMessage({\n        message: { raw: toHex(msg) },\n      }),\n    getAddress: async () => ownerAccount.address,\n    signTypedData: async (params) => {\n      return ownerAccount.signTypedData(params);\n    },\n  };\n  const mockOwner = new MockSigner();\n\n  const validator: KernelBaseValidator = new KernelBaseValidator({\n    validatorAddress: config.validatorAddress,\n    mode: ValidatorMode.sudo,\n    owner,\n  });\n\n  const mockValidator: KernelBaseValidator = new KernelBaseValidator({\n    validatorAddress: config.validatorAddress,\n    mode: ValidatorMode.sudo,\n    owner: mockOwner,\n  });\n\n  const provider = new KernelAccountProvider({\n    rpcProvider: config.rpcProvider,\n    chain: config.chain,\n  });\n  const feeDataGetter = async () => ({\n    maxFeePerGas: 100_000_000_000n,\n    maxPriorityFeePerGas: 100_000_000_000n,\n  });\n  provider.withFeeDataGetter(feeDataGetter);\n\n  function connect(index: bigint, owner = mockOwner) {\n    return provider.connect((_provider) => account(index, owner));\n  }\n\n  function account(index: bigint, owner = mockOwner) {\n    const accountParams: KernelSmartAccountParams = {\n      rpcClient: provider.rpcClient,\n      chain: config.chain,\n      owner: owner,\n      factoryAddress: config.accountFactoryAddress,\n      index: index,\n      defaultValidator: owner === mockOwner ? mockValidator : validator,\n      validator: owner === mockOwner ? mockValidator : validator,\n    };\n    return new KernelSmartContractAccount(accountParams);\n  }\n\n  it(\"getAddress returns valid counterfactual address\", async () => {\n    //contract already deployed\n    let signerWithProvider = connect(0n);\n\n    expect(await signerWithProvider.getAddress()).eql(\n      \"0x97925A25C6B8E8902D2c68A4fcd90421a701d2E8\"\n    );\n\n    //contract already deployed\n    signerWithProvider = connect(3n);\n    expect(await signerWithProvider.getAddress()).eql(\n      \"0xA7b2c01A5AfBCf1FAB17aCf95D8367eCcFeEb845\"\n    );\n  });\n\n  it(\"getNonce returns valid nonce\", async () => {\n    //contract deployed but no transaction\n    const signer: KernelSmartContractAccount = account(0n);\n    expect(await signer.getNonce()).eql(0n);\n\n    const signer2: KernelSmartContractAccount = account(3n);\n    expect(await signer2.getNonce()).eql(2n);\n  });\n\n  it(\"signWithEip6492 should correctly sign the message\", async () => {\n    const messageToBeSigned: Hex =\n      \"0xa70d0af2ebb03a44dcd0714a8724f622e3ab876d0aa312f0ee04823285d6fb1b\";\n    const magicBytes =\n      \"6492649264926492649264926492649264926492649264926492649264926492\";\n    const ownerSignedMessage =\n      \"0x4d61c5c27fb64b207cbf3bcf60d78e725659cff5f93db9a1316162117dff72aa631761619d93d4d97dfb761ba00b61f9274c6a4a76e494df644d968dd84ddcdb1c\";\n    const factoryCode =\n      \"0x296601cd000000000000000000000000180d6465f921c7e0dea0040107d342c87455fff50000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001448D4d3536cDe7A257087206870c6B6E76e3D4ff4000000000000000000000000\";\n    const signature =\n      encodeAbiParameters(parseAbiParameters(\"address, bytes, bytes\"), [\n        config.accountFactoryAddress,\n        factoryCode,\n        ownerSignedMessage,\n      ]) + magicBytes;\n\n    const signer = connect(0n);\n    expect(\n      await signer.request({\n        method: \"personal_sign\",\n        params: [messageToBeSigned, await signer.getAddress()],\n      })\n    ).toBe(ownerSignedMessage);\n\n    const signer2 = connect(10n);\n    expect(\n      await signer2.request({\n        method: \"personal_sign\",\n        params: [messageToBeSigned, await signer2.getAddress()],\n      })\n    ).toBe(signature);\n  });\n\n  it(\"sendUserOperation should fail to execute if gas fee not present\", async () => {\n    let signerWithProvider = connect(1000n);\n\n    const result = signerWithProvider.sendUserOperation({\n      target: await signerWithProvider.getAddress(),\n      data: \"0x\",\n    });\n\n    await expect(result).rejects.toThrowError(\n      /sender balance and deposit together is 0/\n    );\n  });\n\n  // Only work if you have deposited some matic balance for counterfactual address at entrypoint\n  it(\"sendUserOperation should execute properly\", async () => {\n    let signerWithProvider = connect(0n, owner);\n\n    const result = await signerWithProvider.sendUserOperation({\n      target: await signerWithProvider.getAddress(),\n      data: \"0x\",\n      value: 0n,\n    });\n    const txnHash = signerWithProvider.waitForUserOperationTransaction(\n      result.hash as Hash\n    );\n\n    await expect(txnHash).resolves.not.toThrowError();\n  }, 50000);\n\n  it(\"sendUserOperation batch should execute properly\", async () => {\n    let signerWithProvider = connect(0n, owner);\n    const request: KernelUserOperationCallData = {\n      target: await signerWithProvider.getAddress(),\n      data: \"0x\",\n      value: 100000000n,\n    };\n    const request2: KernelUserOperationCallData = {\n      target: await signerWithProvider.getAddress(),\n      data: \"0x\",\n      value: 200000000n,\n    };\n    const requests: BatchUserOperationCallData = [request, request2];\n    const result = await signerWithProvider.sendUserOperation(requests);\n    const txnHash = signerWithProvider.waitForUserOperationTransaction(\n      result.hash as Hash\n    );\n\n    await expect(txnHash).resolves.not.toThrowError();\n  }, 50000);\n\n  //non core functions\n  it(\"should correctly identify whether account is deployed\", async () => {\n    //contract already deployed\n    const signer2 = account(3n);\n    expect(await signer2.isAccountDeployed()).eql(true);\n\n    //contract not deployed\n    const signer3 = account(4n);\n    expect(await signer3.isAccountDeployed()).eql(false);\n  });\n});\n"]}