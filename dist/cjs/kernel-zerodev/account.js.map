{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../src/kernel-zerodev/account.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseSmartContractAccount,\n  type BaseSmartAccountParams,\n  type BatchUserOperationCallData,\n  type SmartAccountSigner,\n} from \"@alchemy/aa-core\";\nimport { parseAbiParameters } from \"abitype\";\nimport {\n  concatHex,\n  encodeAbiParameters,\n  encodeFunctionData,\n  hashMessage,\n  toBytes,\n  type FallbackTransport,\n  type Hex,\n  type Transport,\n} from \"viem\";\nimport { KernelAccountAbi } from \"./abis/KernelAccountAbi.js\";\nimport { KernelFactoryAbi } from \"./abis/KernelFactoryAbi.js\";\nimport { MultiSendAbi } from \"./abis/MultiSendAbi.js\";\nimport type { KernelUserOperationCallData } from \"./types.js\";\nimport { encodeCall } from \"./utils.js\";\nimport { KernelBaseValidator, ValidatorMode } from \"./validator/base.js\";\n\nexport interface KernelSmartAccountParams<\n  TTransport extends Transport | FallbackTransport = Transport\n> extends BaseSmartAccountParams<TTransport> {\n  owner: SmartAccountSigner;\n  index?: bigint;\n  defaultValidator: KernelBaseValidator;\n  validator?: KernelBaseValidator;\n}\n\nexport class KernelSmartContractAccount<\n  TTransport extends Transport | FallbackTransport = Transport\n> extends BaseSmartContractAccount<TTransport> {\n  protected owner: SmartAccountSigner;\n  private readonly index: bigint;\n  private defaultValidator: KernelBaseValidator;\n  private validator: KernelBaseValidator;\n\n  constructor(params: KernelSmartAccountParams<TTransport>) {\n    super(params);\n    this.index = params.index ?? 0n;\n    this.owner = params.owner;\n    this.defaultValidator = params.defaultValidator!;\n    this.validator = params.validator ?? params.defaultValidator!;\n  }\n\n  getDummySignature(): Hex {\n    return \"0x00000000b650d28e51cf39d5c0bb7db6d81cce5f0a77baba8bf8de587c0bc83fa70e374f3bfef2afb697dc5627c669de7dc13e96c85697e0f6aae2f2ebe227552d00cb181c\";\n  }\n\n  async encodeExecute(target: Hex, value: bigint, data: Hex): Promise<Hex> {\n    if (this.validator.mode !== ValidatorMode.sudo) {\n      throw new Error(\"Validator Mode not supported\");\n    } else {\n      return this.encodeExecuteAction(target, value, data, 0);\n    }\n  }\n\n  override async encodeBatchExecute(\n    txs: BatchUserOperationCallData\n  ): Promise<`0x${string}`> {\n    const multiSendData: `0x${string}` = concatHex(\n      txs.map((tx: KernelUserOperationCallData) => encodeCall(tx))\n    );\n    return encodeFunctionData({\n      abi: MultiSendAbi,\n      functionName: \"multiSend\",\n      args: [multiSendData],\n    });\n  }\n\n  signMessage(msg: Uint8Array | string): Promise<Hex> {\n    const formattedMessage = typeof msg === \"string\" ? toBytes(msg) : msg;\n    return this.validator.signMessageWithValidatorParams(formattedMessage);\n  }\n\n  protected async getAccountInitCode(): Promise<Hex> {\n    return concatHex([this.factoryAddress, await this.getFactoryInitCode()]);\n  }\n\n  async encodeExecuteDelegate(\n    target: Hex,\n    value: bigint,\n    data: Hex\n  ): Promise<Hex> {\n    return this.encodeExecuteAction(target, value, data, 1);\n  }\n\n  async signWithEip6492(msg: string | Uint8Array): Promise<Hex> {\n    try {\n      const formattedMessage = typeof msg === \"string\" ? toBytes(msg) : msg;\n      let sig = await this.owner.signMessage(\n        toBytes(hashMessage({ raw: formattedMessage }))\n      );\n      // If the account is undeployed, use ERC-6492\n      if (!(await this.isAccountDeployed())) {\n        sig = (encodeAbiParameters(\n          parseAbiParameters(\"address, bytes, bytes\"),\n          [this.factoryAddress, await this.getFactoryInitCode(), sig]\n        ) +\n          \"6492649264926492649264926492649264926492649264926492649264926492\") as Hex; // magic suffix\n      }\n\n      return sig;\n    } catch (err: any) {\n      console.error(\"Got Error - \", err.message);\n      throw new Error(\"Message Signing with EIP6492 failed\");\n    }\n  }\n\n  protected encodeExecuteAction(\n    target: Hex,\n    value: bigint,\n    data: Hex,\n    code: number\n  ): Hex {\n    return encodeFunctionData({\n      abi: KernelAccountAbi,\n      functionName: \"execute\",\n      args: [target, value, data, code],\n    });\n  }\n\n  protected async getFactoryInitCode(): Promise<Hex> {\n    try {\n      return encodeFunctionData({\n        abi: KernelFactoryAbi,\n        functionName: \"createAccount\",\n        args: [\n          this.defaultValidator.getAddress(),\n          await this.defaultValidator.getOwnerAddress(),\n          this.index,\n        ],\n      });\n    } catch (err: any) {\n      console.error(\"err occurred:\", err.message);\n      throw new Error(\"Factory Code generation failed\");\n    }\n  }\n}\n"]}